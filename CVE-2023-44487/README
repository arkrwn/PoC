In the context of this script, the terms invasive and non-invasive are used to describe the level of interaction with the servers being tested:

Non-invasive Mode:

The script only checks whether a server supports HTTP/2.
No attempts are made to interact with the server beyond checking for HTTP/2 support, This mode is safer as it's less likely to cause any unintended effects on the servers being tested.

Invasive Mode:
Besides checking for HTTP/2 support, the script sends an RST_STREAM frame to the server to test its behavior. this mode is more aggressive and could potentially disrupt the server or trigger security measures.
In the modified script provided:

The --mode command-line argument is introduced to let you choose between the non-invasive and invasive modes.
By default, the script operates in non-invasive mode (--mode non-invasive). In this mode, the script only checks for HTTP/2 support and records the results.
If you opt for invasive mode (--mode invasive), the script will additionally attempt to send an RST_STREAM frame to servers that support HTTP/2, to test their behavior and record the results.
To see the difference in behavior:

Run the script in non-invasive mode (the default mode) and note the output.

```
python3 check.py -i input.txt -o output_non_invasive.csv
```

Now run the script in invasive mode and note the output.

```
python3 check.py -i input.txt -o output_invasive.csv --mode invasive
```

Comparing the two output CSV files will show the difference in behavior between the two modes. In invasive mode, you will see additional entries indicating whether servers are "VULNERABLE", "POSSIBLE", or "LIKELY" vulnerable based on the response to the RST_STREAM frame, whereas in non-invasive mode, you will only see whether servers have downgraded from HTTP/2 or if there was an error checking HTTP/2 support.

> This script is based on https://github.com/bcdannyboy/CVE-2023-44487
